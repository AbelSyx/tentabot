<launch>
  <!-- Goal Parameters -->
  <arg name="world_frame_name" value="world"/>
  <arg name="goal1_x" value="0.0"/>
  <arg name="goal1_y" value="0.0"/>
  <arg name="goal1_z" value="0.6"/>
  <arg name="goal1_yaw" value="$(eval -pi/4)"/>

  <arg name="goal2_x" value="5.0"/>
  <arg name="goal2_y" value="-15.0"/>
  <arg name="goal2_z" value="0.6"/>
  <arg name="goal2_yaw" value="$(eval -pi/4)"/>

  <!-- Robot Parameters -->
  <arg name="world_name" value="forest8"/>
  <arg name="robot_name" value="firefly"/>
  <arg name="robot_frame_name" value="firefly/base_link"/>
  <arg name="robot_bbx_x_max" value="0.2"/>                  <!--NUA: Unnecessary? Parse URDF? -->
  <arg name="robot_bbx_x_min" value="-0.2"/>                 <!--NUA: Unnecessary? Parse URDF? -->
  <arg name="robot_bbx_y_max" value="0.2"/>                  <!--NUA: Unnecessary? Parse URDF? -->
  <arg name="robot_bbx_y_min" value="-0.2"/>                 <!--NUA: Unnecessary? Parse URDF? -->
  <arg name="robot_bbx_z_max" value="0.2"/>                   <!--NUA: Unnecessary? Parse URDF? -->
  <arg name="robot_bbx_z_min" value="-0.2"/>                  <!--NUA: Unnecessary? Parse URDF? -->
  <arg name="robot_max_lat_velo" value="2"/>
  <arg name="robot_max_lat_acc" value="2"/>
  <arg name="robot_max_yaw_velo" value="2"/>
  <arg name="robot_max_yaw_acc" value="2"/>
  <arg name="robot_init_pos_x" value="-15.0"/>                <!--NUA: Unnecessary? Use TF? -->
  <arg name="robot_init_pos_y" value="15.0"/>                 <!--NUA: Unnecessary? Use TF? -->
  <arg name="robot_init_pos_z" value="1.0"/>                  <!--NUA: Unnecessary? Use TF? -->
  <arg name="robot_init_yaw" value="$(eval 2*pi)"/>           <!--NUA: Unnecessary? Use TF? -->
  <arg name="robot_pose_control_msg" value="command/pose"/>
  <arg name="robot_velo_control_msg" value=""/>
  <arg name="odometry_msg" value="/firefly/odometry_sensor1/pose"/>
  <arg name="map_msg" value="/server_octomap"/>

  <!-- Process Parameters -->
  <arg name="visu_flag" value="true" />
  <arg name="time_limit" value="90" />
  <arg name="dt" value="0.1" />
  <arg name="goal_close_threshold" value="0.5" />

  <!-- Trajectory Sampling Parameters-->
  <arg name="trajectory_sampling_dataset_path" value="$(find tentabot)/dataset/trajectory_sampling/" />
  <arg name="tlen" value="10" />
  <arg name="tyaw" value="0.9" />
  <arg name="tpitch" value="0.6" />
  <arg name="tsamp_cnt" value="25" />
  <arg name="lat_velo_samp_cnt" value="1" />
  <arg name="tyaw_cnt" value="31" />
  <arg name="tpitch_cnt" value="21" />

  <!-- Offline Tuning Parameters -->
  <!--arg name="trajectory_data_path" value="$(find tentabot)/dataset/trajectory_sampling/20210515_133107/" /-->
  <arg name="trajectory_data_path" value="" />
  <arg name="max_occupancy_belief_value" value="100" />
  <arg name="pdist_x_max" value="0.3" />
  <arg name="pdist_x_min" value="-0.3" />
  <arg name="pdist_y_max" value="0.3" />
  <arg name="pdist_y_min" value="-0.3" />
  <arg name="pdist_z_max" value="0.3" />
  <arg name="pdist_z_min" value="-0.1" />
  <arg name="sdist_x_max" value="0.5" />
  <arg name="sdist_x_min" value="-0.5" />
  <arg name="sdist_y_max" value="0.5" />
  <arg name="sdist_y_min" value="-0.5" />
  <arg name="sdist_z_max" value="0.5" />
  <arg name="sdist_z_min" value="-0.5" />
  <arg name="sweight_max" value="1" />
  <arg name="sweight_scale" value="10" />
  <arg name="egrid_vdim" value="0.1" />

  <!-- Online Tuning Parameters -->
  <arg name="tbin_obs_cnt_threshold" value="1" />
  <arg name="crash_dist_scale" value="0.3" />
  <arg name="clear_scale" value="0" />
  <arg name="clutter_scale" value="14" />
  <arg name="close_scale" value="20" />
  <arg name="smooth_scale" value="1.0" />
  
  <!-- Data Collection Parameters -->
  <arg name="nav_data_path" value="$(find tentabot)/dataset/tnav/" />
  <!--arg name="nav_data_path" value="" /-->

  <!-- START MAP UTILITY -->
  <include file="$(find tentabot)/launch/tentabot_utilities/map_utility_server_firefly_forest.launch" />

  <!-- Simulation Parameters -->
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg robot_name)" />
  <arg name="paused" value="true" />
  <arg name="robot_model" value="$(find tentabot)/urdf/mav_r200.gazebo" /> <!--{mav_r200} {mav_d435}/-->

  <!-- START SIMULATION -->
  <env name="GAZEBO_RESOURCE_PATH" value="$(find forest_gen)"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find forest_gen)/worlds/$(arg world_name).world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" default="true"/>
    <arg name="verbose" default="false"/>
  </include>

  <group ns="$(arg robot_name)">

    <!-- ADD ROBOT INTO SIMULATION -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg robot_name)" />
      <arg name="model" value="$(arg robot_model)" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="$(arg robot_init_pos_x)"/>
      <arg name="y" value="$(arg robot_init_pos_y)"/>
    </include>

    <!-- START THE POSITION CONTROLLER -->
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg robot_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg robot_name).yaml" />
      <param name="dt" value="$(arg dt)" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>

    <!-- LET'S GO -->
    <node name="tentabot_heuristic_firefly" pkg="tentabot" type="tentabot_heuristic_firefly" output="screen">
      <param name="world_frame_name" value="$(arg world_frame_name)" />
      <param name="goal1_x" value="$(arg goal1_x)" />
      <param name="goal1_y" value="$(arg goal1_y)" />
      <param name="goal1_z" value="$(arg goal1_z)" />
      <param name="goal1_yaw" value="$(arg goal1_yaw)" />
      <param name="goal2_x" value="$(arg goal2_x)" />
      <param name="goal2_y" value="$(arg goal2_y)" />
      <param name="goal2_z" value="$(arg goal2_z)" />
      <param name="goal2_yaw" value="$(arg goal2_yaw)" />
      
      <param name="world_name" value="$(arg world_name)" />
      <param name="robot_name" value="$(arg robot_name)" />
      <param name="robot_frame_name" value="$(arg robot_frame_name)" />
      <param name="robot_bbx_x_max" value="$(arg robot_bbx_x_max)" />
      <param name="robot_bbx_x_min" value="$(arg robot_bbx_x_min)" />
      <param name="robot_bbx_y_max" value="$(arg robot_bbx_y_max)" />
      <param name="robot_bbx_y_min" value="$(arg robot_bbx_y_min)" />
      <param name="robot_bbx_z_max" value="$(arg robot_bbx_z_max)" />
      <param name="robot_bbx_z_min" value="$(arg robot_bbx_z_min)" />
      <param name="robot_max_lat_velo" value="$(arg robot_max_lat_velo)" />
      <param name="robot_max_lat_acc" value="$(arg robot_max_lat_acc)" />
      <param name="robot_max_yaw_velo" value="$(arg robot_max_yaw_velo)" />
      <param name="robot_max_yaw_acc" value="$(arg robot_max_yaw_acc)" />
      <param name="robot_init_pos_x" value="$(arg robot_init_pos_x)" />
      <param name="robot_init_pos_y" value="$(arg robot_init_pos_y)" />
      <param name="robot_init_pos_z" value="$(arg robot_init_pos_z)" />
      <param name="robot_init_yaw" value="$(arg robot_init_yaw)" />
      <param name="robot_pose_control_msg" value="$(arg robot_pose_control_msg)" />
      <param name="robot_velo_control_msg" value="$(arg robot_velo_control_msg)" />
      <param name="odometry_msg" value="$(arg odometry_msg)" />
      <param name="map_msg" value="$(arg map_msg)" />

      <param name="visu_flag" value="$(arg visu_flag)" />
      <param name="time_limit" value="$(arg time_limit)" />
      <param name="dt" value="$(arg dt)" />
      <param name="goal_close_threshold" value="$(arg goal_close_threshold)" />
      
      <param name="trajectory_sampling_dataset_path" value="$(arg trajectory_sampling_dataset_path)" />
      <param name="tlen" value="$(arg tlen)" />
      <param name="tyaw" value="$(arg tyaw)" />
      <param name="tpitch" value="$(arg tpitch)" />
      <param name="tsamp_cnt" value="$(arg tsamp_cnt)" />
      <param name="lat_velo_samp_cnt" value="$(arg lat_velo_samp_cnt)" />
      <param name="tyaw_cnt" value="$(arg tyaw_cnt)" />
      <param name="tpitch_cnt" value="$(arg tpitch_cnt)" />
      
      <param name="trajectory_data_path" value="$(arg trajectory_data_path)" />
      <param name="max_occupancy_belief_value" value="$(arg max_occupancy_belief_value)" />
      <param name="pdist_x_max" value="$(arg pdist_x_max)" />
      <param name="pdist_x_min" value="$(arg pdist_x_min)" />
      <param name="pdist_y_max" value="$(arg pdist_y_max)" />
      <param name="pdist_y_min" value="$(arg pdist_y_min)" />
      <param name="pdist_z_max" value="$(arg pdist_z_max)" />
      <param name="pdist_z_min" value="$(arg pdist_z_min)" />
      <param name="sdist_x_max" value="$(arg sdist_x_max)" />
      <param name="sdist_x_min" value="$(arg sdist_x_min)" />
      <param name="sdist_y_max" value="$(arg sdist_y_max)" />
      <param name="sdist_y_min" value="$(arg sdist_y_min)" />
      <param name="sdist_z_max" value="$(arg sdist_z_max)" />
      <param name="sdist_z_min" value="$(arg sdist_z_min)" />
      <param name="sweight_max" value="$(arg sweight_max)" />
      <param name="sweight_scale" value="$(arg sweight_scale)" />
      <param name="egrid_vdim" value="$(arg egrid_vdim)" />
      
      <param name="tbin_obs_cnt_threshold" value="$(arg tbin_obs_cnt_threshold)" />
      <param name="crash_dist_scale" value="$(arg crash_dist_scale)" />
      <param name="clear_scale" value="$(arg clear_scale)" />
      <param name="clutter_scale" value="$(arg clutter_scale)" />
      <param name="close_scale" value="$(arg close_scale)" />
      <param name="smooth_scale" value="$(arg smooth_scale)" />

      <param name="nav_data_path" value="$(arg nav_data_path)" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  
    <arg name="rvizconfig"    default="$(find tentabot)/rviz/tentabot_firefly.rviz" />
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />
    
  </group>
</launch>